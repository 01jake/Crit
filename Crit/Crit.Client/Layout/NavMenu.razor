@implements IDisposable
@inject NavigationManager NavigationManager

<div class="sidebar-container @(isExpanded ? "expanded" : "collapsed")"
     @onmouseenter="Expand"
     @onmouseleave="Collapse">

    <div class="sidebar-header">
        <div class="brand @(isExpanded ? "show-text" : "hide-text")">
            <span class="bi bi-house-door-fill-nav-menu brand-icon"></span>
            <span class="brand-text">CRIT System</span>
        </div>
    </div>

    <nav class="nav flex-column">
        <div class="nav-items">
            <div class="nav-item">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" title="Dashboard">
                    <span class="bi bi-house-door-fill-nav-menu nav-icon"></span>
                    <span class="nav-text">Dashboard</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="productos" title="Inventario">
                    <span class="bi bi-plus-square-fill-nav-menu nav-icon"></span>
                    <span class="nav-text">Inventario</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="quejas" title="Quejas">
                    <span class="bi bi-list-nested-nav-menu nav-icon"></span>
                    <span class="nav-text">Quejas</span>
                </NavLink>
            </div>

            <AuthorizeView>
                <Authorized>
                    <div class="nav-divider"></div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Manage" title="Mi Cuenta">
                            <span class="bi bi-person-fill-nav-menu nav-icon"></span>
                            <span class="nav-text">@GetUserName(context.User)</span>
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="nav-link logout-btn" title="Cerrar Sesión">
                                <span class="bi bi-arrow-bar-left-nav-menu nav-icon"></span>
                                <span class="nav-text">Cerrar Sesión</span>
                            </button>
                        </form>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-divider"></div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Register" title="Registro">
                            <span class="bi bi-person-nav-menu nav-icon"></span>
                            <span class="nav-text">Registro</span>
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Login" title="Iniciar Sesión">
                            <span class="bi bi-person-badge-nav-menu nav-icon"></span>
                            <span class="nav-text">Iniciar Sesión</span>
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </nav>
</div>

@code {
    [Parameter] public EventCallback<bool> OnSidebarToggle { get; set; }

    private string? currentUrl;
    private bool isExpanded = false;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChangedHandler;
    }

    private void OnLocationChangedHandler(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private async Task OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        await InvokeAsync(StateHasChanged);
    }

    private async Task Expand()
    {
        if (!isExpanded)
        {
            isExpanded = true;
            await OnSidebarToggle.InvokeAsync(true);
        }
    }

    private async Task Collapse()
    {
        if (isExpanded)
        {
            isExpanded = false;
            await OnSidebarToggle.InvokeAsync(false);
        }
    }

    private string GetUserName(System.Security.Claims.ClaimsPrincipal user)
    {
        var name = user?.Identity?.Name ?? "Usuario";
        return name.Length > 12 ? name.Substring(0, 12) + "..." : name;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChangedHandler;
    }
}