@page "/quejas"
@using Crit.Client.Services
@using Crit.Client.Components.Quejas
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@inject QuejaService QuejaService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Sistema de Quejas</PageTitle>

<div class="min-vh-100 bg-light">
    <div class="container-fluid px-4 py-4">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 fw-bold text-dark mb-1">Sistema de Quejas</h1>
                <p class="text-muted">Gestiona y da seguimiento a las quejas</p>
            </div>
            <button class="btn btn-primary" @onclick="MostrarModalCrear">
                <i class="bi bi-plus-lg me-2"></i>Nueva Queja
            </button>
        </div>

        <!-- Componente Estadísticas -->
        <QuejasStats PendingCount="@pendingCount" 
                     InProgressCount="@inProgressCount" 
                     ResolvedCount="@resolvedCount" />

        <!-- Componente Modal -->
        <QuejaModal IsVisible="@mostrarModal"
                    Queja="@quejaEditando"
                    Categorias="@categorias"
                    IsLoading="@guardando"
                    ErrorMessage="@error"
                    SuccessMessage="@success"
                    OnSubmit="GuardarQueja"
                    OnClose="CerrarModal" />

        <!-- Filtros -->
        <div class="row g-3 mb-4">
            <div class="col-md-8">
                <div class="position-relative">
                    <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
                    <input type="text" class="form-control ps-5" placeholder="Buscar quejas..." 
                           @bind="searchTerm" @oninput="OnSearchInput" />
                </div>
            </div>
            <div class="col-md-4">
                <select class="form-select" @bind="filterStatus">
                    <option value="all">Todos los estados</option>
                    <option value="Pendiente">Pendientes</option>
                    <option value="Atendida">En Proceso</option>
                    <option value="Cerrada">Resueltas</option>
                </select>
            </div>
        </div>

        <!-- Componente Loadinga -->
        @if (isLoading)
        {
            <LoadingSpinner LoadingText="Cargando quejas..." />
        }
        else
        {
            <QuejasList Quejas="@quejasFiltradas"
                        ShowAdminActions="@esAdmin"
                        EmptyMessage="@(searchTerm != string.Empty || filterStatus != "all" ? "Intenta ajustar los filtros de búsqueda" : "No hay quejas registradas aún")"
                        OnViewDetail="VerDetalle"
                        OnChangeStatus="CambiarEstatusWrapper"
                        OnDelete="EliminarQueja" />
        }

        <!-- Componente Modal Detalle -->
        <QuejaDetalle IsVisible="@mostrarDetalle"
                      Queja="@quejaDetalle"
                      OnClose="CerrarDetalle" />
    </div>
</div>

@code {
    // Estados
    private List<Queja> quejas = new();
    private List<Queja> quejasFiltradas = new();
    private bool isLoading = true;
    private bool mostrarModal = false;
    private bool mostrarDetalle = false;
    private bool guardando = false;
    private bool esAdmin = false;
    private Queja quejaEditando = new();
    private Queja? quejaDetalle = null;
    private string searchTerm = string.Empty;
    private string filterStatus = "all";
    private string error = string.Empty;
    private string success = string.Empty;
    
    // Estadísticas calculadas
    private int pendingCount => quejas.Count(q => q.Estatus == EstatusQueja.Pendiente);
    private int inProgressCount => quejas.Count(q => q.Estatus == EstatusQueja.Atendida);
    private int resolvedCount => quejas.Count(q => q.Estatus == EstatusQueja.Cerrada);

    // Categorías disponibles
    private readonly string[] categorias = { 
        "Sistema", "Reportes", "Rendimiento", "Interfaz", "Seguridad", 
        "Facturación", "Soporte Técnico", "Otros" 
    };

    protected override async Task OnInitializedAsync()
    {
        await DeterminarRolUsuario();
        await CargarQuejas();
        FiltrarQuejas();
    }

    private async Task DeterminarRolUsuario()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        esAdmin = authState.User.IsInRole("Administrador");
    }

    private async Task CargarQuejas()
    {
        isLoading = true;
        quejas = esAdmin ? await QuejaService.GetQuejasAsync() : await QuejaService.GetMisQuejasAsync();
        isLoading = false;
        FiltrarQuejas();
    }

    private void FiltrarQuejas()
    {
        quejasFiltradas = quejas.Where(q => 
        {
            var matchesSearch = string.IsNullOrEmpty(searchTerm) ||
                q.Titulo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                q.DescripcionQueja.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                q.Categoria.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

            var matchesStatus = filterStatus == "all" || 
                GetEstatusText(q.Estatus).Equals(filterStatus, StringComparison.OrdinalIgnoreCase);

            return matchesSearch && matchesStatus;
        }).ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FiltrarQuejas();
    }

    private void OnFilterChange(ChangeEventArgs e)
    {
        filterStatus = e.Value?.ToString() ?? "all";
        FiltrarQuejas();
    }

    private void MostrarModalCrear()
    {
        quejaEditando = new Queja();
        error = success = string.Empty;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        quejaEditando = new();
        error = success = string.Empty;
    }

    private void VerDetalle(Queja queja)
    {
        quejaDetalle = queja;
        mostrarDetalle = true;
    }

    private void CerrarDetalle()
    {
        mostrarDetalle = false;
        quejaDetalle = null;
    }

    private async Task GuardarQueja()
    {
        guardando = true;
        error = success = string.Empty;

        bool exito = await QuejaService.CreateQuejaAsync(quejaEditando);

        if (exito)
        {
            success = "Queja enviada exitosamente";
            await CargarQuejas();
            StateHasChanged();
            await Task.Delay(2000);
            CerrarModal();
        }
        else
        {
            error = "Error al enviar la queja. Por favor intenta nuevamente.";
        }

        guardando = false;
    }

    private async Task CambiarEstatusWrapper((int Id, EstatusQueja Status) data)
    {
        bool exito = await QuejaService.UpdateQuejaStatusAsync(data.Id, data.Status);
        if (exito)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Estatus actualizado a {GetEstatusText(data.Status)}.");
            await CargarQuejas();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al actualizar el estatus.");
        }
    }

    private async Task EliminarQueja(int id)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar esta queja?");
        if (confirmar)
        {
            bool exito = await QuejaService.DeleteQuejaAsync(id);
            if (exito)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Queja eliminada exitosamente.");
                await CargarQuejas();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la queja.");
            }
        }
    }

    private string GetEstatusText(EstatusQueja estatus)
    {
        return estatus switch
        {
            EstatusQueja.Pendiente => "Pendiente",
            EstatusQueja.Atendida => "En Proceso",
            EstatusQueja.Cerrada => "Resuelto",
            _ => "Desconocido"
        };
    }
}