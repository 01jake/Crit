@page "/productos"
@using Crit.Client.Services
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@inject ProductoService ProductoService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Gestión de Productos</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        <i class="fas fa-boxes"></i> Gestión de Productos
                    </h3>
                    <button class="btn btn-primary" @onclick="MostrarModalCrear">
                        <i class="fas fa-plus"></i> Nuevo Producto
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (productos.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>ID</th>
                                        <th>Nombre</th>
                                        <th>Cantidad</th>
                                        <th>Categoría</th>
                                        <th>Fecha Ingreso</th>
                                        <th>Registrado por</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var producto in productos)
                                    {
                                        <tr>
                                            <td>@producto.Id</td>
                                            <td>@producto.Nombre</td>
                                            <td>
                                                <span class="badge badge-info">@producto.Cantidad</span>
                                            </td>
                                            <td>@producto.Categoria</td>
                                            <td>@producto.FechaIngreso.ToString("dd/MM/yyyy")</td>
                                            <td>@producto.UsuarioQueRegistroUserName</td>
                                            <td>
                                                <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProducto(producto)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <AuthorizeView Roles="Administrador">
                                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </AuthorizeView>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i> No hay productos registrados.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Crear/Editar Producto -->
@if (mostrarModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(productoEditando?.Id > 0 ? "Editar Producto" : "Nuevo Producto")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="productoEditando" OnValidSubmit="GuardarProducto">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="productoEditando.Nombre" />
                            <ValidationMessage For="@(() => productoEditando.Nombre)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Cantidad:</label>
                            <InputNumber class="form-control" @bind-Value="productoEditando.Cantidad" />
                            <ValidationMessage For="@(() => productoEditando.Cantidad)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Categoría:</label>
                            <InputText class="form-control" @bind-Value="productoEditando.Categoria" />
                            <ValidationMessage For="@(() => productoEditando.Categoria)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@guardando">
                                @if (guardando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(productoEditando?.Id > 0 ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos = new();
    private bool isLoading = true;
    private bool mostrarModal = false;
    private bool guardando = false;
    private Producto productoEditando = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        isLoading = true;
        productos = await ProductoService.GetProductosAsync();
        isLoading = false;
    }

    private void MostrarModalCrear()
    {
        productoEditando = new Producto();
        mostrarModal = true;
    }

    private void EditarProducto(Producto producto)
    {
        productoEditando = new Producto
        {
            Id = producto.Id,
            Nombre = producto.Nombre,
            Cantidad = producto.Cantidad,
            Categoria = producto.Categoria
        };
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        productoEditando = new();
    }

    private async Task GuardarProducto()
    {
        guardando = true;
        bool exito;

        if (productoEditando.Id > 0)
        {
            exito = await ProductoService.UpdateProductoAsync(productoEditando);
        }
        else
        {
            exito = await ProductoService.CreateProductoAsync(productoEditando);
        }

        if (exito)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Producto guardado exitosamente.");
            await CargarProductos();
            CerrarModal();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el producto.");
        }

        guardando = false;
    }

    private async Task EliminarProducto(int id)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este producto?");
        if (confirmar)
        {
            bool exito = await ProductoService.DeleteProductoAsync(id);
            if (exito)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Producto eliminado exitosamente.");
                await CargarProductos();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el producto.");
            }
        }
    }
}