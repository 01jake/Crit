
@page "/Dashboard"
@using Crit.Client.Services
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering(false)]
@rendermode InteractiveWebAssembly
@inject ProductoService ProductoService
@inject QuejaService QuejaService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Dashboard - CRIT</PageTitle>

<div class="min-vh-100 bg-light">
    <div class="container-fluid px-4 py-4">
        <div class="mb-4">
            <h1 class="h3 fw-bold text-dark mb-1">Dashboard de Inventario</h1>
            <p class="text-muted">Gestiona tu inventario de manera eficiente</p>
        </div>

        <!-- Stats Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0 small">Total Productos</p>
                                <h4 class="fw-bold text-primary mb-0">@totalProductos</h4>
                                <small class="text-muted">Productos registrados</small>
                            </div>
                            <div class="bg-primary bg-opacity-10 rounded p-3">
                                <i class="bi bi-box-seam text-primary fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0 small">Valor Total</p>
                                <h4 class="fw-bold text-primary mb-0">$@valorTotal.ToString("N0")</h4>
                                <small class="text-muted">Valor del inventario</small>
                            </div>
                            <div class="bg-success bg-opacity-10 rounded p-3">
                                <i class="bi bi-graph-up text-success fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0 small">Alertas</p>
                                <h4 class="fw-bold text-warning mb-0">@productosBajoStock</h4>
                                <small class="text-muted">Productos con stock bajo</small>
                            </div>
                            <div class="bg-warning bg-opacity-10 rounded p-3">
                                <i class="bi bi-exclamation-triangle text-warning fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Add Button -->
        <div class="row g-3 mb-4">
            <div class="col-md-8">
                <div class="position-relative">
                    <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
                    <input type="text" class="form-control ps-5" placeholder="Buscar productos..."
                           @bind="searchTerm" @oninput="OnSearchInput" />
                </div>
            </div>
            <div class="col-md-4">
                <a href="/productos" class="btn btn-primary w-100">
                    <i class="bi bi-plus-lg me-2"></i>Agregar Producto
                </a>
            </div>
        </div>

        <!-- Products Grid -->
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else if (productosFiltrados.Any())
        {
            <div class="row g-4">
                @foreach (var producto in productosFiltrados)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="card border-0 shadow-sm h-100">
                            <div class="card-header bg-white border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h6 class="fw-bold mb-1">@producto.Nombre</h6>
                                        <small class="text-muted">@producto.Categoria</small>
                                    </div>
                                    <span class="badge @GetStockBadgeClass(producto.Cantidad)">
                                        @GetStockStatus(producto.Cantidad)
                                    </span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="text-muted small">Stock:</span>
                                        <span class="fw-semibold">@producto.Cantidad unidades</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="text-muted small">Registrado por:</span>
                                        <span class="small">@producto.UsuarioQueRegistroUserName</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-muted small">Actualizado:</span>
                                        <span class="small">@producto.FechaIngreso.ToString("dd/MM/yyyy")</span>
                                    </div>
                                </div>
                                <div class="d-flex gap-2 pt-3 border-top">
                                    <a href="/productos" class="btn btn-outline-primary btn-sm flex-fill">
                                        <i class="bi bi-pencil me-1"></i>Editar
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm flex-fill">
                                        <i class="bi bi-trash me-1"></i>Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-box-seam display-1 text-muted mb-3"></i>
                <h5 class="fw-semibold text-dark mb-2">No se encontraron productos</h5>
                <p class="text-muted">
                    @(searchTerm != string.Empty ? "Intenta con otros términos de búsqueda" : "Agrega tu primer producto para comenzar")
                </p>
            </div>
        }
    </div>
</div>

@code {
    private List<Producto> productos = new();
    private List<Producto> productosFiltrados = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    // Stats
    private int totalProductos => productos.Count;
    private decimal valorTotal => productos.Sum(p => p.Cantidad * 100); // Asumiendo precio base
    private int productosBajoStock => productos.Count(p => p.Cantidad < 10);

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        FiltrarProductos();
    }

    private async Task CargarProductos()
    {
        isLoading = true;
        productos = await ProductoService.GetProductosAsync();
        isLoading = false;
        FiltrarProductos();
    }

    private void FiltrarProductos()
    {
        productosFiltrados = productos.Where(p =>
            string.IsNullOrEmpty(searchTerm) ||
            p.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            p.Categoria.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FiltrarProductos();
    }

    private string GetStockBadgeClass(int stock)
    {
        return stock switch
        {
            > 10 => "bg-success text-white",
            > 0 => "bg-warning text-dark",
            _ => "bg-danger text-white"
        };
    }

    private string GetStockStatus(int stock)
    {
        return stock switch
        {
            > 10 => "En Stock",
            > 0 => "Stock Bajo",
            _ => "Sin Stock"
        };
    }
}